AWSTemplateFormatVersion: "2010-09-09"
Description: "Supporting resources for Insurance Agent powered by Agents and Knowledge base for Amazon Bedrock"
Metadata:
  LICENSE: >-
    Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

    Permission is hereby granted, free of charge, to any person obtaining a copy of this
    software and associated documentation files (the "Software"), to deal in the Software
    without restriction, including without limitation the rights to use, copy, modify,
    merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Code Asset S3 Bucket, Lambda Deployment Package Keys, and Lambda Layer ARNs
        Parameters:
          - ArtifactBucket
          - DataLoaderKey
          - CreateClaimKey
          - GatherEvidenceKey
          - SendReminderKey
          - BedrockAgentsLayerArn
          - CfnresponseLayerArn
      - Label:
          default: SNS Configuration Settings
        Parameters:
          - SNSEmail
      - Label:
          default: Customer Website Configuration
        Parameters:
          - EvidenceUploadUrl
      - Label:
          default: Generative Application Configuration
        Parameters:
          - S3DataSource
          - VectorStoreIndex
          - FoundationModel
          - StorageLocation
          - LLMAppExposure
    ParameterLabels:
      ArtifactBucket:
        default: your-code-assets-bucket-name
      DataLoaderKey:
        default: /agent/lambda/data-loader/loader_deployment_package.zip
      CreateClaimKey:
        default: /agent/lambda/action-groups/create_claim.zip
      GatherEvidenceKey:
        default: /agent/lambda/action-groups/gather_evidence.zip
      SendReminderKey:
        default: /agent/lambda/action-groups/send_reminder.zip
      BedrockAgentsLayerArn:
        default: bedrock-layer-arn
      CfnresponseLayerArn:
        default: cfnresponse-layer-arn
      SNSEmail:
        default: your-sns-email
      EvidenceUploadUrl:
        default: your-evidence-upload-url
      S3DataSource:
        default: s3://default-bucket
      VectorStoreIndex:
        default: OpenSearch
      FoundationModel:
        default: default-model
      StorageLocation:
        default: s3://prompt-templates
      LLMAppExposure:
        default: Private

Parameters:
  ArtifactBucket:
    Description: S3 Bucket Containing Code Assets for Data Loader and Agent Action Group Lambda Functions
    Type: String
    Default: "automate-task-guidance-customer-resources"
  DataLoaderKey:
    Description: S3 Key for Data Loader
    Type: String
    Default: /agent/lambda/data-loader/loader_deployment_package.zip
  CreateClaimKey:
    Description: S3 Key for create claim function code
    Type: String
    Default: /agent/lambda/action-groups/create_claim.zip
  GatherEvidenceKey:
    Description: S3 Key for gather evidence function code
    Type: String
    Default: /agent/lambda/action-groups/gather_evidence.zip
  SendReminderKey:
    Description: S3 Key for send reminder function code
    Type: String
    Default: /agent/lambda/action-groups/send_reminder.zip
  BedrockAgentsLayerArn:
    Description: Agents for Bedrock Lambda Layer
    Type: String
    Default: "arn:aws:lambda:us-east-1:239380694500:layer:bedrock-agents:101"
  CfnresponseLayerArn:
    Description: Agents for Bedrock Lambda Layer
    Type: String
    Default: "arn:aws:lambda:us-east-1:239380694500:layer:cfnresponse:64"
  SNSEmail:
    Description: SNS Email.
    Type: String
    Default: "kbuilder@amazon.com"
  EvidenceUploadUrl:
    Description: Customer Evidence Upload Website URL
    Type: String
    Default: "https://claimsdev.dkmn9jc6ric9u.amplifyapp.com/"
  S3DataSource:
    Type: String
    Description: Select the S3 data source for the generative application
    Default: "automate-task-guidance-customer-resources"
    AllowedValues: 
      - "automate-task-guidance-customer-resources"
  VectorStoreIndex:
    Type: String
    Description: Select the vector store index for the generative application
    Default: "OpenSearch"
  FoundationModel:
    Type: String
    Description: Select the foundation model for the generative application
    Default: "anthropic.claude-3-sonnet-20240229-v1:0"
    AllowedValues: 
      - "anthropic.claude-3-sonnet-20240229-v1:0"
      - "other-models"
      # Add more options as needed
  StorageLocation:
    Type: String
    Description: Enter the storage location for prompt templates
    Default: "automate-task-guidance-customer-resources"
    # Add validation or constraints as needed
  LLMAppExposure:
    Type: String
    Description: Specify how the LLM app is exposed
    Default: "Private"
    AllowedValues: 
      - "Private"
      - "Public"
      # Add more options as needed

Resources:
  ExistingClaimsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-ExistingClaims
      AttributeDefinitions:
        - AttributeName: claimId
          AttributeType: S
      KeySchema:
        - AttributeName: claimId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '3'
        WriteCapacityUnits: '3'
      SSESpecification:
        SSEEnabled: True

  AgentActionGroupLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${AWS::StackName}-AgentActionGroupLambdaRole
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  AgentActionGroupLambdaRoleDefaultPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub ${AWS::StackName}-AgentActionGroupLambdaRoleDefaultPolicy
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
              - lambda:Get*
              - lambda:InvokeFunction
              - bedrock:InvokeModel
              - sns:Publish
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource: '*'        
        Version: 2012-10-17
      Roles:
        - !Ref AgentActionGroupLambdaRole

  BedrockCreateClaimFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref CreateClaimFunction
      Principal: 'bedrock.amazonaws.com'

  BedrockSendReminderFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SendReminderFunction
      Principal: 'bedrock.amazonaws.com'

  BedrockGatherEvidenceFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref GatherEvidenceFunction
      Principal: 'bedrock.amazonaws.com'

  DataLoaderFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to initially load the claims catalog.
      FunctionName: !Sub ${AWS::StackName}-DDBDataLoader
      Code: 
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref DataLoaderKey
      Runtime: python3.11
      MemorySize: 256
      Timeout: 20
      Handler: index.lambda_handler
      Layers:
        - !Ref CfnresponseLayerArn
      Role: !GetAtt AgentActionGroupLambdaRole.Arn
      Environment:
        Variables:
          EXISTING_CLAIMS_TABLE_NAME: !Ref ExistingClaimsTable

  LoadPlanData:
    Type: Custom::LoadDynamoDB
    Properties:
      ServiceToken: !GetAtt DataLoaderFunction.Arn

  CreateClaimFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Bedrock Insurance agent create claim function
      FunctionName: !Sub ${AWS::StackName}-CreateClaimFunction
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref CreateClaimKey
      Runtime: python3.11
      MemorySize: 512
      Timeout: 30
      Handler: create_claim.lambda_handler
      Layers:
        - !Ref BedrockAgentsLayerArn
      Role: !GetAtt AgentActionGroupLambdaRole.Arn
      Architectures:
        - arm64
      Environment:
        Variables:
          CUSTOMER_WEBSITE_URL: !Ref EvidenceUploadUrl
          EXISTING_CLAIMS_TABLE_NAME: !Ref ExistingClaimsTable
          SNS_TOPIC_ARN: !Ref SNSTopic

  SendReminderFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Bedrock Insurance agent send reminder function
      FunctionName: !Sub ${AWS::StackName}-SendReminderFunction
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref SendReminderKey
      Runtime: python3.11
      MemorySize: 512
      Timeout: 30
      Handler: send_reminder.lambda_handler
      Layers:
        - !Ref BedrockAgentsLayerArn
      Role: !GetAtt AgentActionGroupLambdaRole.Arn
      Architectures:
        - arm64
      Environment:
        Variables:
          EXISTING_CLAIMS_TABLE_NAME: !Ref ExistingClaimsTable
          SNS_TOPIC_ARN: !Ref SNSTopic

  GatherEvidenceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Bedrock Insurance agent gather evidence function.
      FunctionName: !Sub ${AWS::StackName}-GatherEvidenceFunction
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref GatherEvidenceKey
      Runtime: python3.11
      MemorySize: 512
      Timeout: 30
      Handler: gather_evidence.lambda_handler
      Layers:
        - !Ref BedrockAgentsLayerArn
      Role: !GetAtt AgentActionGroupLambdaRole.Arn
      Architectures:
        - arm64
      Environment:
        Variables:
          CUSTOMER_WEBSITE_URL: !Ref EvidenceUploadUrl
          SNS_TOPIC_ARN: !Ref SNSTopic

  SNSTopic:
    Type: AWS::SNS::Topic

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !Ref SNSEmail
      Protocol: email
      TopicArn: !Ref SNSTopic

  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: FA-Agent
      AgentResourceRoleArn: "arn:aws:iam::239380694500:role/AmazonBedrockExecutionRoleForAgents_Service_Role"
      AutoPrepare: true
      Description: Agent for the generative application
      FoundationModel: !Ref FoundationModel
      IdleSessionTTLInSeconds: 1800
      Instruction: "You are an insurance agent that has access to domain-specific insurance knowledge. You can create new insurance claims, send pending document reminders to policy holders with open claims, and gather claim evidence. You can also retrieve claim amount and repair estimate information for a specific claim ID or answer general insurance questions about things like coverage, premium, policy, rate, deductible, accident, documents, resolution, and condition. You can answer internal questions about things like which steps an agent should follow and the company's internal processes. You can respond to questions about multiple claim IDs within a single conversation"
      Tags: 
        Name: GenerativeAgent
      TestAliasTags: 
        Name: GenerativeAgentTest

  KnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: FA-KnowledgeBase
      Description: Knowledge base for the generative application
      RoleArn: "arn:aws:iam::239380694500:role/admin"
      KnowledgeBaseConfiguration:
        Type: "VECTOR"
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v1"
      StorageConfiguration:
        Type: "OPENSEARCH_SERVERLESS"

  DataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      KnowledgeBaseId: !Ref KnowledgeBase
      Name: FA-DataSource
      Description: DataSource for the generative application
      DataSourceConfiguration:
        Type: "S3"
        S3Configuration:
          BucketArn: "arn:aws:s3:::automate-task-guidance-customer-resources"

# Condition to determine the type of storage
Conditions:
  IsOpenSearch: !Equals [!Ref VectorStoreIndex, "OpenSearch"]
  IsAurora: !Equals [!Ref VectorStoreIndex, "Aurora"]
  IsPinecone: !Equals [!Ref VectorStoreIndex, "Pinecone"]

Outputs:
  AgentName:
    Description: Name of the generative application agent
    Value: !Ref Agent

  KnowledgeBaseName:
    Description: Name of the generative application knowledge base
    Value: !Ref KnowledgeBase

  DataSourceName:
    Description: Name of the generative application data source
    Value: !Ref DataSource